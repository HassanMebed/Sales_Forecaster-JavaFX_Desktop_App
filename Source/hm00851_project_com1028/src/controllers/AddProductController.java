/**
 * AddProductController.java
 */
package controllers;

import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import main.AppManager;
import models.AddProductModel;

/**
 * @author Hassan Mebed
 *
 * Controller class for AddProductView.fxml
 * All fields after an '@FXML' tag indicate a GUI element created in the AddProductView.fxml file, being
 * injected in this class.
 * All methods after an '@FXML' tag are linked to the 'onAction' attribute or similar attribute of a GUI 
 * element created in the AddProductView.fxml file, such as a button.
 */
public class AddProductController extends Controller
{
	@FXML
	/** injected text input field for new product's name */
	private TextField productName;
	
	@FXML
	/** injected vertical layout container for adding elements to it vertically, has the text input field in it */
	private VBox textInput;
	
	/** controller's corresponding model */
	private AddProductModel model = null;
	
	/**
	 * Default constructor that calls the Controller super class constructor and initializes the 
	 * controller's model.
	 */
	public AddProductController()
	{
		super();
		this.model = new AddProductModel();
	}
	
	@FXML
	/**
	 * Called when user clicks cancel button.
	 * Notifies AppManager to close this child window.
	 */
	private void onCancel()
	{
		AppManager.getInstance().notifyCloseChildWindow(this);
	}
	
	@FXML
	/**
	 * Validates inputed product name before directing it to the model, and if the new product is created
	 * successfully, notifies AppManager with necessary requests, and if not, notifies AppManager to display
	 * the error generated by the model.
	 */
	private void onContinue()
	{
		if(this.textInput.getChildren().size() > 1)
		{
			this.textInput.getChildren().remove(1);
		}
		
		if(this.productName.getText().length() > 95)
		{
			Label productNameError = new Label("*Too long");
			
			productNameError.setTextFill(Color.RED);
			this.textInput.getChildren().add(productNameError);
		}
		else if(this.productName.getText().isEmpty())
		{
			Label productNameError = new Label("*Required");
			
			productNameError.setTextFill(Color.RED);
			this.textInput.getChildren().add(productNameError);
		}
		else
		{
			int productIDGenerated = this.model.addProduct(AppManager.getInstance().getUser(this), this.productName.getText());
			
			if(productIDGenerated == 0)
			{
				if(!this.model.getModelErrors().equals(""))
				{
					AppManager.getInstance().sendAlert(new Alert(Alert.AlertType.ERROR), "ERROR", "Invalid Input", this.model.getModelErrors());
				}
				else if(this.model.getConnectionError() != null)
				{					
					AppManager.getInstance().sendAlert(AppManager.getInstance().createExceptionAlert(this.model.getConnectionError()), "ERROR", "Unable to Communicate with Database", "Error Details:");
				}
				
				this.model.clearErrors();
			}
			else
			{
				AppManager.getInstance().notifyProductSelection(this, productIDGenerated, this.productName.getText());
				AppManager.getInstance().notifyReloadMainWindow(this);
				AppManager.getInstance().notifyTransitionToManageSales(this);
			}
		}
	}
	
	@FXML
	/**
	 * Submits inputed product name for processing when user presses on enter keyboard button.
	 * 
	 * @param keyEvent
	 * 			any keyboard click event.
	 */
	private void onEnterClicked(KeyEvent keyEvent)
	{
		if(keyEvent.getCode() == KeyCode.ENTER)
		{
			this.onContinue();
		}
	}
}
